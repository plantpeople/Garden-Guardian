{"version":3,"sources":["logo.svg","components/SearchBar.js","components/SearchResults.js","util/API.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","props","value","handleInputChange","handleSearch","type","onChange","onClick","SearchResults","plantNames","plants","map","e","query","axios","get","Search","state","searchQuery","searchResults","console","log","API","then","response","resultsArray","data","common_name","setState","catch","error","target","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","domain","clientId","redirectUri","origin","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,qJCY5BC,EAVG,SAACC,GAAW,IACpBC,EAA2CD,EAA3CC,MAAOC,EAAoCF,EAApCE,kBAAmBC,EAAiBH,EAAjBG,aAClC,OACE,6BACE,2BAAOC,KAAK,OAAOH,MAAOA,EAAOI,SAAUH,IAC3C,4BAAQI,QAASH,GAAjB,YCGSI,EARO,SAACP,GAAW,IAE5BQ,EADYR,EAAVS,OACkBC,KAAI,SAAAC,GAAC,OAAK,2BAAIA,MAEtC,OAAO,6BAAMH,I,iBCJA,EACH,SAACI,GACT,OAAOC,IAAMC,IAAI,UAAYF,ICuClBG,E,4MApCbC,MAAQ,CACNC,YAAa,GACbC,cAAe,I,EAEjBf,aAAe,WACbgB,QAAQC,IAAI,SACZC,EAAa,EAAKL,MAAMC,aACrBK,MAAK,SAACC,GACL,IAAMC,EAAeD,EAASE,KAAKf,KAAI,SAACC,GAAD,OAAOA,EAAEe,eAEhD,EAAKC,SAAS,CAAET,cAAeM,OAEhCI,OAAM,SAACC,GAAD,OAAWV,QAAQC,IAAIS,O,EAElC3B,kBAAoB,SAACS,GAAO,IAClBV,EAAUU,EAAEmB,OAAZ7B,MACR,EAAK0B,SAAS,CAAEV,YAAahB,IAC7BkB,QAAQC,IAAI,EAAKJ,MAAMC,c,uDAIvB,OACE,6BACE,kBAAC,EAAD,CACEhB,MAAO8B,KAAKf,MAAMC,YAClBf,kBAAmB6B,KAAK7B,kBACxBC,aAAc4B,KAAK5B,eAErB,kBAAC,EAAD,CACEM,OAAQsB,KAAKf,MAAME,qB,GA9BRc,a,OCGNC,EAJH,WACV,OAAO,kBAAC,EAAD,OCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CACEC,OAAO,2BACPC,SAAS,mCACTC,YAAaT,OAAOC,SAASS,QAE7B,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAC,GACLV,QAAQU,MAAMA,EAAMwB,c","file":"static/js/main.8f1e0608.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\n\nconst SearchBar = (props) => {\n  const { value, handleInputChange, handleSearch } = props;\n  return (\n    <div>\n      <input type=\"text\" value={value} onChange={handleInputChange} />\n      <button onClick={handleSearch}>Search</button>\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\n\nconst SearchResults = (props) => {\n  const{plants} = props\nconst plantNames = plants.map(e => (<p>{e}</p>))\n\n  return <div>{plantNames}</div>;\n\n};\n\nexport default SearchResults;\n","import axios from \"axios\";\n\nexport default {\n  queryApi: (query) => {\n    return axios.get(\"plants/\" + query);\n  },\n};\n","import React, { Component } from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport SearchResults from \"./SearchResults\";\nimport API from \"../util/API\";\n\n\nclass Search extends Component {\n  state = {\n    searchQuery: \"\",\n    searchResults: [],\n  };\n  handleSearch = () => {\n    console.log(\"mount\");\n    API.queryApi(this.state.searchQuery)\n      .then((response) => {\n        const resultsArray = response.data.map((e) => e.common_name);\n\n        this.setState({ searchResults: resultsArray });\n      })\n      .catch((error) => console.log(error));\n  }\n  handleInputChange = (e) => {\n    const { value } = e.target;\n    this.setState({ searchQuery: value });\n    console.log(this.state.searchQuery)\n  };\n\n  render() {\n    return (\n      <div>\n        <SearchBar\n          value={this.state.searchQuery}\n          handleInputChange={this.handleInputChange}\n          handleSearch={this.handleSearch}\n        />\n        <SearchResults \n          plants={this.state.searchResults}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Search from \"./components/Search\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nconst App = () => {\n  return <Search />;\n};\n\nexport default App;\n\n/* const { loginWithRedirect, logout, user } = useAuth0();\n  return (\n    <div className=\"App\">\n      <button\n        onClick={() => {\n          loginWithRedirect();\n        }}\n      >\n        Login\n      </button>\n      <button onClick={logout}>logout</button>\n      <h1>{user}</h1>\n    </div>\n  ); */\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Auth0Provider } from \"@auth0/auth0-react\";\nReactDOM.render(\n  <React.StrictMode>\n    <Auth0Provider\n      domain=\"plantpeople.us.auth0.com\"\n      clientId=\"rlzBbEvFUeAjzHs0QurSeHNNrZ29TOKe\"\n      redirectUri={window.location.origin}\n    >\n      <App />\n    </Auth0Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}